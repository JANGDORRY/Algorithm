class Solution {
    
public:
    int N;
    int k = 0;
    // const int bitsize = 2500;
    int cherryPickup(vector<vector<int>>& grid) { 
        N = grid.size();
        
        
        vector<vector<int>> grid2(N, vector<int>(N,0));
        vector<bitset<2500> > save;
        bitset<2500> tmp;
        unordered_map<string,int> umap;
        
        recursive(0,0,tmp,grid,save,umap);
        
        cout << save.size() << endl;
//         cout << save[0].count() << endl;
        
        
        int max = 0 , M = 0;
        
        M = save.size();
        if(M == 1)
            max = save[0].count();
            
        for(int i = 0; i < M ; ++i){
            for(int j = i + 1 ; j < M ; ++j) {
                tmp.reset();
                tmp = save[i] | save[j];
                max = tmp.count() > max ? tmp.count() : max;
            }
        }
        
        
        return max;
        
    }
    
    void recursive(int i, int j, bitset<2500> &tmp, vector<vector<int>> &grid,  vector<bitset<2500> > &save, vector<vector<int>> &grid2) {
        
        if(i >= N || j >= N || grid[i][j] == -1)
            return;
        
        if (grid[i][j] == 1)
            tmp.set(j*N+i, 1);
        
        if(grid2[i][j] > tmp.count()) {
            grid2[i][j] = tmp.count();
        }

        if(i == N-1 && j == N-1) {
            
            save.push_back(tmp);
                        
            //cout << tmp << endl;
            tmp.set(j*N+i,0);            
            return;
        }
        
        recursive(i+1,j,tmp,grid,save,umap);
        recursive(i,j+1,tmp,grid,save,umap);
    
        tmp.set(j*N+i,0);            
        return;
    }
        
};


class Solution {
    
public:
    int N;
    // const int bitsize = 2500;
    int cherryPickup(vector<vector<int>>& grid) { 
        N = grid.size();
        
        vector<bitset<2500> > save;
        bitset<2500> tmp;
        unordered_map<string,int> umap;
        
        recursive(0,0,tmp,grid,save,umap);
        
        cout << save.size() << endl;
//         cout << save[0].count() << endl;
        
        
        int max = 0 , M = 0;
        
        M = save.size();
        if(M == 1)
            max = save[0].count();
            
        for(int i = 0; i < M ; ++i){
            for(int j = i + 1 ; j < M ; ++j) {
                tmp.reset();
                tmp = save[i] | save[j];
                max = tmp.count() > max ? tmp.count() : max;
            }
        }
        
        
        return max;
        
    }
    
    void recursive(int i, int j, bitset<2500> &tmp, vector<vector<int>> &grid,  vector<bitset<2500> > &save, unordered_map<string,int> &umap) {
        
        if(i >= N || j >= N || grid[i][j] == -1)
            return;
        
        bool update = false;
        
        if (grid[i][j] == 1) {
            tmp.set(j*N+i, 1);
            update = true;   
        }
        
        if(i == N-1 && j == N-1) {
            
            if(!umap.count(tmp.to_string())) {
                umap[tmp.to_string()] = 1;
                save.push_back(tmp);
            }
            //cout << tmp << endl;
            if(update)
                tmp.set(j*N+i,0);  
            
            return;
        }
        
        recursive(i+1,j,tmp,grid,save,umap);
        recursive(i,j+1,tmp,grid,save,umap);
        
        if(update)
            tmp.set(j*N+i,0);      
        
        return;
    }
        
};

class Solution {
    
public:
    int N;
    int max;
    // const int bitsize = 2500;
    int cherryPickup(vector<vector<int>>& grid) { 
        N = grid.size();
        
        
        bitset<100> tmp;
        tmp.reset();
        int flag = 0;
        recursive(0,0,tmp,grid,flag);
        
          
        return max;
        
    }
    
    void recursive(int i, int j, bitset<100> &tmp, vector<vector<int>> &grid, int flag) {
        
        if( i < 0 || j < 0|| i >= N || j >= N || grid[i][j] == -1)
            return;
        
        bool update = 0;
        
        if (grid[i][j] == 1 && tmp[i*N+j] == 0) {
            tmp.set(i*N+j, 1);
            update = 1;
        }
        
        if(!flag && i == N-1 && j == N-1) {
            
            flag = 1;
            //cout << tmp << endl;
        }  
            
        if (flag && i == 0 && j == 0) {
            
//             if(tmp.count() > max)
//                 cout << tmp << endl;
            
            max = tmp.count() > max ? tmp.count() : max;
            
            return;
        }
        
        int a = flag ? -1 : 1;
               
        recursive(i+a,j,tmp,grid,flag);
        recursive(i,j+a,tmp,grid,flag);
    
        if(update)
            tmp.set(i*N+j,0);       
        
        return;
    }
        
};


class Solution {
    
public:
    int N;
    int max_recur = 0;
    // const int bitsize = 2500;
    int cherryPickup(vector<vector<int>>& grid) { 
        N = grid.size();
        
        vector<bitset<2500> > save;
        vector<bitset<2500> > save2;
        bitset<2500> tmp;
        bitset<2500> prev;
        
        prev.reset();
        
        recursive(0,0,tmp,prev,grid,save);
        
         cout << save.size() << endl;
         //cout << save[0].count() << endl;
        
        int max = max_recur , M = save.size();
        max_recur = 0;
         cout << max << endl;

        for(int i = 0; i < M ; ++i) 
            recursive(0,0,tmp,save[i],grid,save2);
        
         cout << save2.size() << endl;
         cout << max_recur << endl;
        
        return max + max_recur;
        
    }
    
    void recursive(int i, int j, bitset<2500> &tmp, bitset<2500> &prev, vector<vector<int>> &grid,  vector<bitset<2500> > &save) {
        
        if(i >= N || j >= N || grid[i][j] == -1)
            return;
        
        if (grid[i][j] == 1 && prev[j*N+i] == 0)
            tmp.set(j*N+i, 1);
        
        if(i == N-1 && j == N-1) {
            
            if(tmp.count() > max_recur) {
                save.clear();
                save.push_back(tmp);
                max_recur = tmp.count();
            } else if (tmp.count() == max_recur) {
                save.push_back(tmp);
            }
            
            //cout << tmp << endl;
            tmp.set(j*N+i,0);            
            return;
        }
        
        recursive(i+1,j,tmp,prev,grid,save);
        recursive(i,j+1,tmp,prev,grid,save);
    
        tmp.set(j*N+i,0);            
        return;
    }
        
};
















class Solution {
    
public:
    int N;
    int cherryPickup(vector<vector<int>>& grid) { 
        N = grid.size();
        
        vector<bitset<100> > save;
        bitset<100> tmp;
        
        recursive(0,0,tmp,grid,save);
        
        cout << save.size() << endl;
//         cout << save[0].count() << endl;
        
        
        int max = 0 , M = 0;
        
        M = save.size();
        if(M == 1)
            max = save[0].count();
            
        for(int i = 0; i < M ; ++i){
            for(int j = i + 1 ; j < M ; ++j) {
                tmp.reset();
                tmp = save[i] | save[j];
                max = tmp.count() > max ? tmp.count() : max;
            }
        }
        
        
        return max;
        
    }
    
    void recursive(int i, int j, bitset<100> &tmp, vector<vector<int>> &grid,  vector<bitset<100> > &save) {
        
        if(i >= N || j >= N || grid[i][j] == -1)
            return;
        
        if (grid[i][j] == 1)
            tmp.set(j*N+i, 1);
        
        if(i == N-1 && j == N-1) {
            save.push_back(tmp);
            //cout << tmp << endl;
            tmp.set(j*N+i,0);            
            return;
        }
        
        recursive(i+1,j,tmp,grid,save);
        recursive(i,j+1,tmp,grid,save);
    
        tmp.set(j*N+i,0);            
        return;
    }
        
};


[[1,1,1,1,-1,-1,-1,1,0,0],
 [1,0,0,0,1,0,0,0,1,0],
 [0,0,1,1,1,1,0,1,1,1],
 [1,1,0,1,1,1,0,-1,1,1],
 [0,0,0,0,1,-1,0,0,1,-1],
 [1,0,1,1,1,0,0,-1,1,0],
 [1,1,0,1,0,0,1,0,1,-1],
 [1,-1,0,1,0,0,0,1,-1,1],
 [1,0,-1,0,-1,0,0,1,0,0],
 [0,0,-1,0,1,0,1,0,0,1]]

1000000000000000000000000000001000000000000000000010000000000010000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000010000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000010000000000011000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000011000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001000000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000001100000000001000000000000000000000000000001000000000000000000010000000001101011
1000000000000000000000000000001000000000000000000010000000000010000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000010000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000010000000000011000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000011000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001000000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000001100000000000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000000101011
1000000000000000000000000000001000000000000000000000000000000001000000000000000000010000000000101011
... 13203 more lines

[[1,1,1,1,0,0,0],
[0,0,0,1,0,0,0],
[0,0,0,1,0,0,1],
[1,0,0,1,0,0,0],
[0,0,0,1,0,0,0],
[0,0,0,1,0,0,0],
[0,0,0,1,1,1,1]]

[[1,1,1,1,-1,1,-1,1,1,1],[1,1,1,1,1,-1,0,1,1,1],[-1,1,-1,1,1,1,-1,1,1,1],[1,1,1,1,1,1,1,1,1,1],[1,0,1,1,1,1,1,0,1,1],[-1,1,1,1,-1,0,1,1,1,0],[1,-1,1,1,1,0,1,1,1,1],[1,1,0,1,1,1,-1,1,1,1],[1,1,1,0,1,1,1,1,1,0],[1,-1,1,0,1,0,1,1,1,1]]

[[1,1,1,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,1],[1,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,0,0,0],[0,0,0,1,1,1,1]]